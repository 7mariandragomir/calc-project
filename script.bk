OLD SCRIPT


// // Initialize variables
// let num1, num2, operator;
// let newCalc = true;
// let displayValue = '';

// const calc = document.getElementById('calculator');
// const display = document.getElementById('display-main');
// const displaySec = document.getElementById('display-sec');

// // Calculator button configuration
// const calcButtons = [
//     { type: 'operator', id: 'add', value: '+', accessKey: '+' },
//     { type: 'operator', id: 'subtract', value: '-', accessKey: '-' },
//     { type: 'operator', id: 'multiply', value: '×', accessKey: 'x' },
//     { type: 'operator', id: 'divide', value: '÷', accessKey: '/' },
//     { type: 'operator', id: 'result', value: '=', accessKey: '=' },
//     { type: 'operator', id: 'clear', value: 'clear', accessKey: 'c' },
//     { type: 'operator', id: 'dot', value: '.', accessKey: '.' },
//     { type: 'value', id: 'zero', value: 0, accessKey: '0' },
//     ...Array.from({ length: 9 }, (_, i) => ({ type: 'value', value: i + 1, accessKey: (i + 1).toString() }))
// ];

// // Draw the calculator buttons
// function drawCalculator() {
//     calcButtons.forEach(item => {
//         const element = document.createElement('div');
//         if (item.id) element.id = item.id;
//         element.classList.add('button');
//         element.textContent = item.value;

//         element.addEventListener('click', () => handleButtonClick(item));
//         calc.appendChild(element);
//     });
// }

// drawCalculator();

// // Handle button clicks
// function handleButtonClick(item) {
//     if (item.type === 'value') {
//         if (newCalc) clearMainDisplay();
//         updateMainDisplay(item.value);
//         newCalc = false;
//     } else {
//         handleOperator(item.value);
//     }
// }

// // Handle operator logic
// function handleOperator(value) {
//     switch (value) {
//         case '.':
//             if (!displayValue.includes('.')) updateMainDisplay(value);
//             break;
//         case 'clear':
//             clearMainDisplay();
//             break;
//         case '=':
//             calculateResult();
//             break;
//         default:
//             if (displayValue && !operator) {
//                 updateMainDisplay(value);
//                 operator = value;
//             }
//     }
// }

// // Update the main display
// function updateMainDisplay(input) {
//     display.innerHTML += input;
//     displayValue = display.innerHTML;
// }

// // Clear the main display
// function clearMainDisplay() {
//     display.innerHTML = '';
//     displayValue = '';
//     operator = undefined;
//     newCalc = true;
// }

// // Perform the calculation
// function calculateResult() {
//     const [a, b] = displayValue.split(operator).map(Number);
//     if (!isNaN(a) && !isNaN(b)) {
//         const result = operate(operator, a, b);
//         displaySec.innerHTML = displayValue;
//         clearMainDisplay();
//         updateMainDisplay(result);
//     }
//     num1 = num2 = operator = undefined;
//     newCalc = true;
// }

// // Perform a basic operation
// function operate(operator, a, b) {
//     switch (operator) {
//         case '×': return a * b;
//         case '÷': return a / b;
//         case '+': return a + b;
//         case '-': return a - b;
//         default: throw new Error(`Unsupported operator: ${operator}`);
//     }
// }

// // Complex operation handler (optional feature)
// function complexOperate(input = '2+9÷3-5×2×3') {
//     const arr = Array.from(input);
//     const operators = [ ['×', '÷'], ['+', '-'] ];

//     for (const ops of operators) {
//         let i = 0;
//         while (i < arr.length) {
//             if (ops.includes(arr[i])) {
//                 const a = Number(arr[i - 1]);
//                 const b = Number(arr[i + 1]);
//                 const result = operate(arr[i], a, b);
//                 arr.splice(i - 1, 3, result.toString());
//                 i = Math.max(0, i - 2);
//             } else {
//                 i++;
//             }
//         }
//     }
//     return arr.join('');
// }
